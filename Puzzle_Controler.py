import pygame
import sys
import numpy as np
import time
from AI_Solver import *
from Pygame_board import *

#Start of main function
def main():
    global solved, current_state #number_of_moves global variables
    board = create_solvable_board() # generate solvable board
    start_state = [] #start state
    goal_state = [1, 2, 3, 4, 5, 6, 7, 8, 0]
    solved = False  # Flag to track if the puzzle is solved
    winning_message = ""
    current_state = 0
    number_of_moves = 0
    
    #Start of main game loop running set to True
    running = True
    while running:
        #Event listener
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                #if mouse was clicked check what was clicked
            elif event.type == pygame.MOUSEBUTTONDOWN:
                button_clicked = check_button_clicks(event.pos)
                #if play button was clicked generate new board, reset moves counter
                if button_clicked == "Play":
                    board = create_solvable_board()
                    solved = False
                    current_state = 0
                    number_of_moves = 0  # Reset for the next game
                #if button solve was clicked and the puzzles not solved yet
                # convert current tiles configuration into list and pass that list to AI algorithm along with the goal state
                # AI will generate list of states from start to goal state and save it in solution in form of tuples
                elif button_clicked == "Solve" and not solved:
                    start_state = board.flatten().tolist()
                    start_time = time.time()  # Record the time before a_star starts
                    solution, total_states = a_star(start_state, goal_state)
                    solution_moves = len(solution)-1
                    end_time = time.time()  # Record the time after a_star finishes
                    duration = end_time - start_time  # Calculate the duration for a_star
                    print(f"start state: {start_state}")
                    print(f"goal state: {goal_state}")
                    print(f"states checked: {total_states}")
                    print(f"a_star took {duration} seconds to find the solution")
                    print(f"Number of moves: {solution_moves}")
                    solution_size = (len(solution)-1) # -1 the start state
                    #loop trough the states generated by AI algorithm ignoring the first state which is the start state
                    for state in solution[1:]:
                        if current_state < solution_size:
                            #convert each state into numpy 2d array
                            board_states = np.array(state).reshape((3, 3))
                            board = np.array(board_states)
                            current_state+=1 # increment current state
                            number_of_moves +=1 # increment number of moves
                            #draw new tiles configuration on game window
                            screen.fill(BACKGROUND_COLOR)
                            draw_board(board)
                            draw_buttons()
                            pygame.display.flip()
                            time.sleep(0.5) # delay 
                    solved = True #set solved to true for displaying winning message
                    winning_message = f"Puzzle solved with {number_of_moves} moves"
                    #if button quit was clicked game over
                elif button_clicked == "Quit":
                    running = False
                else:
                    #increment number of moves counter
                    number_of_moves += 1
                    #Call function to handle mouse clicks if mouse clicked
                    if handle_mouse_click(board, event.pos, solved):
                        solved = True
                        winning_message = f"Puzzle solved with {number_of_moves} moves"
                        number_of_moves = 0  # Reset for the next game

        # Display on window
        screen.fill(BACKGROUND_COLOR)
        draw_board(board)
        draw_buttons()
        if solved:
            display_winning_message(winning_message)
        pygame.display.flip()

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
